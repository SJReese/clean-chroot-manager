.\" Text automatically generated by txt2man
.TH clean-chroot-manager 1 "02 December 2018" "" ""
.SH NAME
\fBclean-chroot-manager \fP- Wrapper script to manage clean chroots for building packages under Arch Linux.
\fB
.SH DESCRIPTION
ccm provides a "one-click" solution for building packages in a clean chroot. Two key points that differentiates ccm from the arch-build-scripts are:
.IP \(bu 3
ccm manages a local repo within the chroot so dependencies that you build are pulled transparently from that local repo.
.IP \(bu 3
ccm can use distcc.
.PP
To expand on point 1: let's say that we want to build "bar" from the AUR but "bar" has a build dependency of "foo" which is also in the AUR. Rather than first building "foo", then installing "foo", then building "bar", and finally removing "foo", the local repo will save a copy of foo.pkg.tar.xz which is indexed automatically therein. Pacman within the chroot is aware of the "foo" package thanks to the local repo. So, when the user tries to build "bar", pacman will silently grabs foo.pkg.tar.xz from the local repo as any other dependency.
.PP
To expand on point 2: distcc allows one to distribute compilation tasks to other PCs on the LAN to build packages faster. So long as distcc is properly configured on the host machine and on the slave machine/machines, ccm can build using it. For more on distcc and how to setup using it under Arch, see the wiki page: https://wiki.archlinux.org/index.php/Distcc
.SH SETUP
$XDG_CONFIG_HOME/clean-chroot-manager.conf (referred to as "the config file" hereafter) will be created on the first invocation of ccm and contains all user managed settings. Edit this file prior to running ccm a second time. Make sure the user running ccm has sudo rights to execute /usr/bin/clean-chroot-manager or /usr/bin/ccm.
.SH USAGE
sudo ccm [option]
.SH OPTIONS
.TP
.B
a
Add any packages in the current directory to the local repo without building them. Useful if you already built something and simply want to copy it in the local repo.
.TP
.B
c
Create a clean chroot.
.TP
.B
cd
Create a clean chroot with distcc enabled. This is a shortcut/override for defining USE_DISTCC in the config file.
.TP
.B
d
Delete the ENTIRE contents of the local repo.
.TP
.B
l
List the contents of the local repo (i.e. the packages built to date) should any exist.
.TP
.B
n
Nuke the clean chroot (delete it and everything under it).
.TP
.B
p
Preview settings. Show some bits about the chroot itself.
.TP
.B
s
Run makepkg in build mode under the chroot. The equivalent of `makepkg \fB-s\fP` in the chroot.
.TP
.B
S
Run makepkg in build mode under the chroot but do not clean it. Useful if building a series of packages with highly similar deps.
.TP
.B
R
Repackage the current package if built. The equivalent of `makepkg \fB-sR\fP` in the chroot.
.TP
.B
t
Toggle [testing] and [community-testing] on/off in the chroot. This function will enable or disable the testing repos in the chroot and also take care of upgrading/downgrading any affected packages.
.TP
.B
u
Update the packages inside the chroot. The equivalent of `pacman \fB-Syu\fP` in the chroot.
.SH TIPS
.IP \(bu 3
Since ccm requires sudo rights, consider making an alias for invoking it as such in ~/.bashrc or the like. For example: alias ccm='sudo ccm' will do the trick.
.IP \(bu 3
If you have multiple PCs on your LAN, consider having them help you compile via distcc which is supported within ccm. See $XDG_CONFIG_HOME/clean-chroot-manager.conf for setup instructions.
.IP \(bu 3
If your machine has lots of memory (>=16G is probably safe), consider locating the chroot to tmpfs to minimize access times and avoid disk usage. Know that some builds may take an lot of space!
.PP
One way is to simply define a directory to mount as tmpfs like so in /etc/fstab:
.PP
.nf
.fam C
 tmpfs /scratch tmpfs nodev,size=20G 0 0

.fam T
.fi
In order to have the expected CHROOTPATH64 directories created, we can use a systemd tmpfile like so:
.PP
.nf
.fam C
 /etc/tmpfiles.d/ccm_dirs.conf
 d /scratch/.chroot64 0755 facade users -

.fam T
.fi
.SH USAGE EXAMPLES
Create a clean chroot:
.PP
.nf
.fam C
 $ sudo ccm c

.fam T
.fi
Attempt to build the package in the clean chroot. If successful, the package will be added to a local pacman repo inside the chroot so that it will be available for use as a dependency for building other packages:
.PP
.nf
.fam C
 $ cd /path/to/PKGBUILD
 $ sudo ccm s

.fam T
.fi
List out the contents of the chroot's local repo assuming something has been built. Useful to see what is present:
.PP
.nf
.fam C
 $ sudo ccm l

.fam T
.fi
Deletes everything under the top level of the chroot effectively removing it from the system:
.PP
.nf
.fam C
 $ sudo ccm n

.fam T
.fi
.SH BUGS
Discover a bug? Please open an issue on the project page linked below.
.SH ONLINE
.IP \(bu 3
Project page: https://github.com/graysky2/clean-chroot-manager
.SH AUTHOR
graysky (graysky AT archlinux DOT us).
